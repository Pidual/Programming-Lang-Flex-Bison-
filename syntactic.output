Terminals unused in grammar

    ARG


State 0 conflicts: 10 shift/reduce
State 8 conflicts: 10 shift/reduce
State 60 conflicts: 10 shift/reduce
State 75 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | sentence
    3        | decfun
    4        | program sentence
    5        | program decfun

    6 sentence: decvar
    7         | asigvar
    8         | initvar
    9         | operation EOL
   10         | chi
   11         | hasta
   12         | for
   13         | err
   14         | callfuncion
   15         | printSentence

   16 decvar: VAR IDVR EOL
   17       | VAR VSTR EOL

   18 initvar: VAR VSTR IGU STR EOL
   19        | VAR IDVR IGU INT EOL
   20        | VAR IDVR IGU FLO EOL
   21        | VAR IDVR IGU operation EOL
   22        | VAR IDVR IGU value EOL

   23 asigvar: IDVR IGU value EOL
   24        | IDVR IGU operation EOL
   25        | IDVR IGU callfuncion

   26 value: INT
   27      | FLO
   28      | IDVR

   29 operation: value MAS value
   30          | value RES value
   31          | value MUL value
   32          | value DIV value

   33 callfuncion: IDVR PIZ PDE EOL
   34            | IDVR PIZ INT INT PDE EOL

   35 chi: CHI PIZ condition PDE operation EOL FIN
   36    | CHI PIZ condition PDE IDVR IGU value EOL FIN
   37    | CHI PIZ condition PDE IDVR IGU operation EOL FIN
   38    | CHI PIZ condition PDE IDVR IGU value NOO IDVR IGU value EOL FIN
   39    | CHI PIZ condition PDE IDVR IGU operation NOO IDVR IGU operation EOL FIN

   40 hasta: HAS PIZ value MEN value PDE IDVR IGU operation EOL
   41      | HAS PIZ value MEIGU value PDE IDVR IGU operation EOL

   42 condition: value MEN value
   43          | value MEIGU value
   44          | value MAY value
   45          | value MAYGU value
   46          | value EQU value
   47          | value DIF value

   48 decfun: FUN IDVR PAR EOL FUE
   49       | FUN IDVR PAR return FUE
   50       | FUN IDVR PAR decvar return FUE
   51       | FUN IDVR PAR initvar return FUE
   52       | FUN IDVR PAR asigvar return FUE
   53       | FUN IDVR PAR operation return FUE

   54 return: RTN IDVR EOL
   55       | RTN operation EOL

   56 err: ITR program ATP program FIN
   57    | ITR EOL ATP printSentence FIN

   58 for: POR PIZ IDVR IGU INT EOL value MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ IDVR IGU INT EOL value MEIGU value PDE IDVR IGU operation EOL
   60    | POR PIZ initvar condition PDE asigvar

   61 printSentence: PRINT PIZ STR PDE EOL
   62              | PRINT PIZ VSTR PDE EOL
   63              | PRINT PIZ value PDE EOL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDVR <sval> (258) 16 19 20 21 22 23 24 25 28 33 34 36 37 38 39 40 41 48 49 50 51 52 53 54 58 59
    STR <sval> (259) 18 61
    VSTR <sval> (260) 17 18 62
    INT <ival> (261) 19 26 34 58 59
    FLO <fval> (262) 20 27
    EOL (263) 9 16 17 18 19 20 21 22 23 24 33 34 35 36 37 38 39 40 41 48 54 55 57 58 59 61 62 63
    VAR (264) 16 17 18 19 20 21 22
    IGU (265) 18 19 20 21 22 23 24 25 36 37 38 39 40 41 58 59
    MAS (266) 29
    MUL (267) 31
    RES (268) 30
    DIV (269) 32
    MEN (270) 40 42 58
    MEIGU (271) 41 43 59
    MAY (272) 44
    MAYGU (273) 45
    EQU (274) 46
    DIF (275) 47
    CHI (276) 35 36 37 38 39
    PIZ (277) 33 34 35 36 37 38 39 40 41 58 59 60 61 62 63
    PDE (278) 33 34 35 36 37 38 39 40 41 58 59 60 61 62 63
    FIN (279) 35 36 37 38 39 56 57
    NOO (280) 38 39
    HAS (281) 40 41
    FUN (282) 48 49 50 51 52 53
    PAR (283) 48 49 50 51 52 53
    RTN (284) 54 55
    ITR (285) 56 57
    FUE (286) 48 49 50 51 52 53
    ATP (287) 56 57
    ARG (288)
    PRINT (289) 61 62 63
    POR (290) 58 59 60


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program (37)
        on left: 1 2 3 4 5
        on right: 0 4 5 56
    sentence (38)
        on left: 6 7 8 9 10 11 12 13 14 15
        on right: 2 4
    decvar (39)
        on left: 16 17
        on right: 6 50
    initvar <fval> (40)
        on left: 18 19 20 21 22
        on right: 8 51 60
    asigvar (41)
        on left: 23 24 25
        on right: 7 52 60
    value <fval> (42)
        on left: 26 27 28
        on right: 22 23 29 30 31 32 36 38 40 41 42 43 44 45 46 47 58 59 63
    operation <fval> (43)
        on left: 29 30 31 32
        on right: 9 21 24 35 37 39 40 41 53 55 58 59
    callfuncion (44)
        on left: 33 34
        on right: 14 25
    chi (45)
        on left: 35 36 37 38 39
        on right: 10
    hasta (46)
        on left: 40 41
        on right: 11
    condition <fval> (47)
        on left: 42 43 44 45 46 47
        on right: 35 36 37 38 39 60
    decfun (48)
        on left: 48 49 50 51 52 53
        on right: 3 5
    return (49)
        on left: 54 55
        on right: 49 50 51 52 53
    err (50)
        on left: 56 57
        on right: 13
    for (51)
        on left: 58 59 60
        on right: 12
    printSentence <fval> (52)
        on left: 61 62 63
        on right: 15 57


State 0

    0 $accept: • program $end

    IDVR   shift, and go to state 1
    INT    shift, and go to state 2
    FLO    shift, and go to state 3
    VAR    shift, and go to state 4
    CHI    shift, and go to state 5
    HAS    shift, and go to state 6
    FUN    shift, and go to state 7
    ITR    shift, and go to state 8
    PRINT  shift, and go to state 9
    POR    shift, and go to state 10

    IDVR      [reduce using rule 1 (program)]
    INT       [reduce using rule 1 (program)]
    FLO       [reduce using rule 1 (program)]
    VAR       [reduce using rule 1 (program)]
    CHI       [reduce using rule 1 (program)]
    HAS       [reduce using rule 1 (program)]
    FUN       [reduce using rule 1 (program)]
    ITR       [reduce using rule 1 (program)]
    PRINT     [reduce using rule 1 (program)]
    POR       [reduce using rule 1 (program)]
    $default  reduce using rule 1 (program)

    program        go to state 11
    sentence       go to state 12
    decvar         go to state 13
    initvar        go to state 14
    asigvar        go to state 15
    value          go to state 16
    operation      go to state 17
    callfuncion    go to state 18
    chi            go to state 19
    hasta          go to state 20
    decfun         go to state 21
    err            go to state 22
    for            go to state 23
    printSentence  go to state 24


State 1

   23 asigvar: IDVR • IGU value EOL
   24        | IDVR • IGU operation EOL
   25        | IDVR • IGU callfuncion
   28 value: IDVR •
   33 callfuncion: IDVR • PIZ PDE EOL
   34            | IDVR • PIZ INT INT PDE EOL

    IGU  shift, and go to state 25
    PIZ  shift, and go to state 26

    $default  reduce using rule 28 (value)


State 2

   26 value: INT •

    $default  reduce using rule 26 (value)


State 3

   27 value: FLO •

    $default  reduce using rule 27 (value)


State 4

   16 decvar: VAR • IDVR EOL
   17       | VAR • VSTR EOL
   18 initvar: VAR • VSTR IGU STR EOL
   19        | VAR • IDVR IGU INT EOL
   20        | VAR • IDVR IGU FLO EOL
   21        | VAR • IDVR IGU operation EOL
   22        | VAR • IDVR IGU value EOL

    IDVR  shift, and go to state 27
    VSTR  shift, and go to state 28


State 5

   35 chi: CHI • PIZ condition PDE operation EOL FIN
   36    | CHI • PIZ condition PDE IDVR IGU value EOL FIN
   37    | CHI • PIZ condition PDE IDVR IGU operation EOL FIN
   38    | CHI • PIZ condition PDE IDVR IGU value NOO IDVR IGU value EOL FIN
   39    | CHI • PIZ condition PDE IDVR IGU operation NOO IDVR IGU operation EOL FIN

    PIZ  shift, and go to state 29


State 6

   40 hasta: HAS • PIZ value MEN value PDE IDVR IGU operation EOL
   41      | HAS • PIZ value MEIGU value PDE IDVR IGU operation EOL

    PIZ  shift, and go to state 30


State 7

   48 decfun: FUN • IDVR PAR EOL FUE
   49       | FUN • IDVR PAR return FUE
   50       | FUN • IDVR PAR decvar return FUE
   51       | FUN • IDVR PAR initvar return FUE
   52       | FUN • IDVR PAR asigvar return FUE
   53       | FUN • IDVR PAR operation return FUE

    IDVR  shift, and go to state 31


State 8

   56 err: ITR • program ATP program FIN
   57    | ITR • EOL ATP printSentence FIN

    IDVR   shift, and go to state 1
    INT    shift, and go to state 2
    FLO    shift, and go to state 3
    EOL    shift, and go to state 32
    VAR    shift, and go to state 4
    CHI    shift, and go to state 5
    HAS    shift, and go to state 6
    FUN    shift, and go to state 7
    ITR    shift, and go to state 8
    PRINT  shift, and go to state 9
    POR    shift, and go to state 10

    IDVR      [reduce using rule 1 (program)]
    INT       [reduce using rule 1 (program)]
    FLO       [reduce using rule 1 (program)]
    VAR       [reduce using rule 1 (program)]
    CHI       [reduce using rule 1 (program)]
    HAS       [reduce using rule 1 (program)]
    FUN       [reduce using rule 1 (program)]
    ITR       [reduce using rule 1 (program)]
    PRINT     [reduce using rule 1 (program)]
    POR       [reduce using rule 1 (program)]
    $default  reduce using rule 1 (program)

    program        go to state 33
    sentence       go to state 12
    decvar         go to state 13
    initvar        go to state 14
    asigvar        go to state 15
    value          go to state 16
    operation      go to state 17
    callfuncion    go to state 18
    chi            go to state 19
    hasta          go to state 20
    decfun         go to state 21
    err            go to state 22
    for            go to state 23
    printSentence  go to state 24


State 9

   61 printSentence: PRINT • PIZ STR PDE EOL
   62              | PRINT • PIZ VSTR PDE EOL
   63              | PRINT • PIZ value PDE EOL

    PIZ  shift, and go to state 34


State 10

   58 for: POR • PIZ IDVR IGU INT EOL value MEN value PDE IDVR IGU operation EOL
   59    | POR • PIZ IDVR IGU INT EOL value MEIGU value PDE IDVR IGU operation EOL
   60    | POR • PIZ initvar condition PDE asigvar

    PIZ  shift, and go to state 35


State 11

    0 $accept: program • $end
    4 program: program • sentence
    5        | program • decfun

    $end   shift, and go to state 36
    IDVR   shift, and go to state 1
    INT    shift, and go to state 2
    FLO    shift, and go to state 3
    VAR    shift, and go to state 4
    CHI    shift, and go to state 5
    HAS    shift, and go to state 6
    FUN    shift, and go to state 7
    ITR    shift, and go to state 8
    PRINT  shift, and go to state 9
    POR    shift, and go to state 10

    sentence       go to state 37
    decvar         go to state 13
    initvar        go to state 14
    asigvar        go to state 15
    value          go to state 16
    operation      go to state 17
    callfuncion    go to state 18
    chi            go to state 19
    hasta          go to state 20
    decfun         go to state 38
    err            go to state 22
    for            go to state 23
    printSentence  go to state 24


State 12

    2 program: sentence •

    $default  reduce using rule 2 (program)


State 13

    6 sentence: decvar •

    $default  reduce using rule 6 (sentence)


State 14

    8 sentence: initvar •

    $default  reduce using rule 8 (sentence)


State 15

    7 sentence: asigvar •

    $default  reduce using rule 7 (sentence)


State 16

   29 operation: value • MAS value
   30          | value • RES value
   31          | value • MUL value
   32          | value • DIV value

    MAS  shift, and go to state 39
    MUL  shift, and go to state 40
    RES  shift, and go to state 41
    DIV  shift, and go to state 42


State 17

    9 sentence: operation • EOL

    EOL  shift, and go to state 43


State 18

   14 sentence: callfuncion •

    $default  reduce using rule 14 (sentence)


State 19

   10 sentence: chi •

    $default  reduce using rule 10 (sentence)


State 20

   11 sentence: hasta •

    $default  reduce using rule 11 (sentence)


State 21

    3 program: decfun •

    $default  reduce using rule 3 (program)


State 22

   13 sentence: err •

    $default  reduce using rule 13 (sentence)


State 23

   12 sentence: for •

    $default  reduce using rule 12 (sentence)


State 24

   15 sentence: printSentence •

    $default  reduce using rule 15 (sentence)


State 25

   23 asigvar: IDVR IGU • value EOL
   24        | IDVR IGU • operation EOL
   25        | IDVR IGU • callfuncion

    IDVR  shift, and go to state 44
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value        go to state 45
    operation    go to state 46
    callfuncion  go to state 47


State 26

   33 callfuncion: IDVR PIZ • PDE EOL
   34            | IDVR PIZ • INT INT PDE EOL

    INT  shift, and go to state 48
    PDE  shift, and go to state 49


State 27

   16 decvar: VAR IDVR • EOL
   19 initvar: VAR IDVR • IGU INT EOL
   20        | VAR IDVR • IGU FLO EOL
   21        | VAR IDVR • IGU operation EOL
   22        | VAR IDVR • IGU value EOL

    EOL  shift, and go to state 50
    IGU  shift, and go to state 51


State 28

   17 decvar: VAR VSTR • EOL
   18 initvar: VAR VSTR • IGU STR EOL

    EOL  shift, and go to state 52
    IGU  shift, and go to state 53


State 29

   35 chi: CHI PIZ • condition PDE operation EOL FIN
   36    | CHI PIZ • condition PDE IDVR IGU value EOL FIN
   37    | CHI PIZ • condition PDE IDVR IGU operation EOL FIN
   38    | CHI PIZ • condition PDE IDVR IGU value NOO IDVR IGU value EOL FIN
   39    | CHI PIZ • condition PDE IDVR IGU operation NOO IDVR IGU operation EOL FIN

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 55
    condition  go to state 56


State 30

   40 hasta: HAS PIZ • value MEN value PDE IDVR IGU operation EOL
   41      | HAS PIZ • value MEIGU value PDE IDVR IGU operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 57


State 31

   48 decfun: FUN IDVR • PAR EOL FUE
   49       | FUN IDVR • PAR return FUE
   50       | FUN IDVR • PAR decvar return FUE
   51       | FUN IDVR • PAR initvar return FUE
   52       | FUN IDVR • PAR asigvar return FUE
   53       | FUN IDVR • PAR operation return FUE

    PAR  shift, and go to state 58


State 32

   57 err: ITR EOL • ATP printSentence FIN

    ATP  shift, and go to state 59


State 33

    4 program: program • sentence
    5        | program • decfun
   56 err: ITR program • ATP program FIN

    IDVR   shift, and go to state 1
    INT    shift, and go to state 2
    FLO    shift, and go to state 3
    VAR    shift, and go to state 4
    CHI    shift, and go to state 5
    HAS    shift, and go to state 6
    FUN    shift, and go to state 7
    ITR    shift, and go to state 8
    ATP    shift, and go to state 60
    PRINT  shift, and go to state 9
    POR    shift, and go to state 10

    sentence       go to state 37
    decvar         go to state 13
    initvar        go to state 14
    asigvar        go to state 15
    value          go to state 16
    operation      go to state 17
    callfuncion    go to state 18
    chi            go to state 19
    hasta          go to state 20
    decfun         go to state 38
    err            go to state 22
    for            go to state 23
    printSentence  go to state 24


State 34

   61 printSentence: PRINT PIZ • STR PDE EOL
   62              | PRINT PIZ • VSTR PDE EOL
   63              | PRINT PIZ • value PDE EOL

    IDVR  shift, and go to state 54
    STR   shift, and go to state 61
    VSTR  shift, and go to state 62
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 63


State 35

   58 for: POR PIZ • IDVR IGU INT EOL value MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ • IDVR IGU INT EOL value MEIGU value PDE IDVR IGU operation EOL
   60    | POR PIZ • initvar condition PDE asigvar

    IDVR  shift, and go to state 64
    VAR   shift, and go to state 65

    initvar  go to state 66


State 36

    0 $accept: program $end •

    $default  accept


State 37

    4 program: program sentence •

    $default  reduce using rule 4 (program)


State 38

    5 program: program decfun •

    $default  reduce using rule 5 (program)


State 39

   29 operation: value MAS • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 67


State 40

   31 operation: value MUL • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 68


State 41

   30 operation: value RES • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 69


State 42

   32 operation: value DIV • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 70


State 43

    9 sentence: operation EOL •

    $default  reduce using rule 9 (sentence)


State 44

   28 value: IDVR •
   33 callfuncion: IDVR • PIZ PDE EOL
   34            | IDVR • PIZ INT INT PDE EOL

    PIZ  shift, and go to state 26

    $default  reduce using rule 28 (value)


State 45

   23 asigvar: IDVR IGU value • EOL
   29 operation: value • MAS value
   30          | value • RES value
   31          | value • MUL value
   32          | value • DIV value

    EOL  shift, and go to state 71
    MAS  shift, and go to state 39
    MUL  shift, and go to state 40
    RES  shift, and go to state 41
    DIV  shift, and go to state 42


State 46

   24 asigvar: IDVR IGU operation • EOL

    EOL  shift, and go to state 72


State 47

   25 asigvar: IDVR IGU callfuncion •

    $default  reduce using rule 25 (asigvar)


State 48

   34 callfuncion: IDVR PIZ INT • INT PDE EOL

    INT  shift, and go to state 73


State 49

   33 callfuncion: IDVR PIZ PDE • EOL

    EOL  shift, and go to state 74


State 50

   16 decvar: VAR IDVR EOL •

    $default  reduce using rule 16 (decvar)


State 51

   19 initvar: VAR IDVR IGU • INT EOL
   20        | VAR IDVR IGU • FLO EOL
   21        | VAR IDVR IGU • operation EOL
   22        | VAR IDVR IGU • value EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 75
    FLO   shift, and go to state 76

    value      go to state 77
    operation  go to state 78


State 52

   17 decvar: VAR VSTR EOL •

    $default  reduce using rule 17 (decvar)


State 53

   18 initvar: VAR VSTR IGU • STR EOL

    STR  shift, and go to state 79


State 54

   28 value: IDVR •

    $default  reduce using rule 28 (value)


State 55

   42 condition: value • MEN value
   43          | value • MEIGU value
   44          | value • MAY value
   45          | value • MAYGU value
   46          | value • EQU value
   47          | value • DIF value

    MEN    shift, and go to state 80
    MEIGU  shift, and go to state 81
    MAY    shift, and go to state 82
    MAYGU  shift, and go to state 83
    EQU    shift, and go to state 84
    DIF    shift, and go to state 85


State 56

   35 chi: CHI PIZ condition • PDE operation EOL FIN
   36    | CHI PIZ condition • PDE IDVR IGU value EOL FIN
   37    | CHI PIZ condition • PDE IDVR IGU operation EOL FIN
   38    | CHI PIZ condition • PDE IDVR IGU value NOO IDVR IGU value EOL FIN
   39    | CHI PIZ condition • PDE IDVR IGU operation NOO IDVR IGU operation EOL FIN

    PDE  shift, and go to state 86


State 57

   40 hasta: HAS PIZ value • MEN value PDE IDVR IGU operation EOL
   41      | HAS PIZ value • MEIGU value PDE IDVR IGU operation EOL

    MEN    shift, and go to state 87
    MEIGU  shift, and go to state 88


State 58

   48 decfun: FUN IDVR PAR • EOL FUE
   49       | FUN IDVR PAR • return FUE
   50       | FUN IDVR PAR • decvar return FUE
   51       | FUN IDVR PAR • initvar return FUE
   52       | FUN IDVR PAR • asigvar return FUE
   53       | FUN IDVR PAR • operation return FUE

    IDVR  shift, and go to state 89
    INT   shift, and go to state 2
    FLO   shift, and go to state 3
    EOL   shift, and go to state 90
    VAR   shift, and go to state 4
    RTN   shift, and go to state 91

    decvar     go to state 92
    initvar    go to state 93
    asigvar    go to state 94
    value      go to state 16
    operation  go to state 95
    return     go to state 96


State 59

   57 err: ITR EOL ATP • printSentence FIN

    PRINT  shift, and go to state 9

    printSentence  go to state 97


State 60

   56 err: ITR program ATP • program FIN

    IDVR   shift, and go to state 1
    INT    shift, and go to state 2
    FLO    shift, and go to state 3
    VAR    shift, and go to state 4
    CHI    shift, and go to state 5
    HAS    shift, and go to state 6
    FUN    shift, and go to state 7
    ITR    shift, and go to state 8
    PRINT  shift, and go to state 9
    POR    shift, and go to state 10

    IDVR      [reduce using rule 1 (program)]
    INT       [reduce using rule 1 (program)]
    FLO       [reduce using rule 1 (program)]
    VAR       [reduce using rule 1 (program)]
    CHI       [reduce using rule 1 (program)]
    HAS       [reduce using rule 1 (program)]
    FUN       [reduce using rule 1 (program)]
    ITR       [reduce using rule 1 (program)]
    PRINT     [reduce using rule 1 (program)]
    POR       [reduce using rule 1 (program)]
    $default  reduce using rule 1 (program)

    program        go to state 98
    sentence       go to state 12
    decvar         go to state 13
    initvar        go to state 14
    asigvar        go to state 15
    value          go to state 16
    operation      go to state 17
    callfuncion    go to state 18
    chi            go to state 19
    hasta          go to state 20
    decfun         go to state 21
    err            go to state 22
    for            go to state 23
    printSentence  go to state 24


State 61

   61 printSentence: PRINT PIZ STR • PDE EOL

    PDE  shift, and go to state 99


State 62

   62 printSentence: PRINT PIZ VSTR • PDE EOL

    PDE  shift, and go to state 100


State 63

   63 printSentence: PRINT PIZ value • PDE EOL

    PDE  shift, and go to state 101


State 64

   58 for: POR PIZ IDVR • IGU INT EOL value MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ IDVR • IGU INT EOL value MEIGU value PDE IDVR IGU operation EOL

    IGU  shift, and go to state 102


State 65

   18 initvar: VAR • VSTR IGU STR EOL
   19        | VAR • IDVR IGU INT EOL
   20        | VAR • IDVR IGU FLO EOL
   21        | VAR • IDVR IGU operation EOL
   22        | VAR • IDVR IGU value EOL

    IDVR  shift, and go to state 103
    VSTR  shift, and go to state 104


State 66

   60 for: POR PIZ initvar • condition PDE asigvar

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 55
    condition  go to state 105


State 67

   29 operation: value MAS value •

    $default  reduce using rule 29 (operation)


State 68

   31 operation: value MUL value •

    $default  reduce using rule 31 (operation)


State 69

   30 operation: value RES value •

    $default  reduce using rule 30 (operation)


State 70

   32 operation: value DIV value •

    $default  reduce using rule 32 (operation)


State 71

   23 asigvar: IDVR IGU value EOL •

    $default  reduce using rule 23 (asigvar)


State 72

   24 asigvar: IDVR IGU operation EOL •

    $default  reduce using rule 24 (asigvar)


State 73

   34 callfuncion: IDVR PIZ INT INT • PDE EOL

    PDE  shift, and go to state 106


State 74

   33 callfuncion: IDVR PIZ PDE EOL •

    $default  reduce using rule 33 (callfuncion)


State 75

   19 initvar: VAR IDVR IGU INT • EOL
   26 value: INT •

    EOL  shift, and go to state 107

    EOL       [reduce using rule 26 (value)]
    $default  reduce using rule 26 (value)


State 76

   20 initvar: VAR IDVR IGU FLO • EOL
   27 value: FLO •

    EOL  shift, and go to state 108

    EOL       [reduce using rule 27 (value)]
    $default  reduce using rule 27 (value)


State 77

   22 initvar: VAR IDVR IGU value • EOL
   29 operation: value • MAS value
   30          | value • RES value
   31          | value • MUL value
   32          | value • DIV value

    EOL  shift, and go to state 109
    MAS  shift, and go to state 39
    MUL  shift, and go to state 40
    RES  shift, and go to state 41
    DIV  shift, and go to state 42


State 78

   21 initvar: VAR IDVR IGU operation • EOL

    EOL  shift, and go to state 110


State 79

   18 initvar: VAR VSTR IGU STR • EOL

    EOL  shift, and go to state 111


State 80

   42 condition: value MEN • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 112


State 81

   43 condition: value MEIGU • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 113


State 82

   44 condition: value MAY • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 114


State 83

   45 condition: value MAYGU • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 115


State 84

   46 condition: value EQU • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 116


State 85

   47 condition: value DIF • value

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 117


State 86

   35 chi: CHI PIZ condition PDE • operation EOL FIN
   36    | CHI PIZ condition PDE • IDVR IGU value EOL FIN
   37    | CHI PIZ condition PDE • IDVR IGU operation EOL FIN
   38    | CHI PIZ condition PDE • IDVR IGU value NOO IDVR IGU value EOL FIN
   39    | CHI PIZ condition PDE • IDVR IGU operation NOO IDVR IGU operation EOL FIN

    IDVR  shift, and go to state 118
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 119


State 87

   40 hasta: HAS PIZ value MEN • value PDE IDVR IGU operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 120


State 88

   41 hasta: HAS PIZ value MEIGU • value PDE IDVR IGU operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 121


State 89

   23 asigvar: IDVR • IGU value EOL
   24        | IDVR • IGU operation EOL
   25        | IDVR • IGU callfuncion
   28 value: IDVR •

    IGU  shift, and go to state 25

    $default  reduce using rule 28 (value)


State 90

   48 decfun: FUN IDVR PAR EOL • FUE

    FUE  shift, and go to state 122


State 91

   54 return: RTN • IDVR EOL
   55       | RTN • operation EOL

    IDVR  shift, and go to state 123
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 124


State 92

   50 decfun: FUN IDVR PAR decvar • return FUE

    RTN  shift, and go to state 91

    return  go to state 125


State 93

   51 decfun: FUN IDVR PAR initvar • return FUE

    RTN  shift, and go to state 91

    return  go to state 126


State 94

   52 decfun: FUN IDVR PAR asigvar • return FUE

    RTN  shift, and go to state 91

    return  go to state 127


State 95

   53 decfun: FUN IDVR PAR operation • return FUE

    RTN  shift, and go to state 91

    return  go to state 128


State 96

   49 decfun: FUN IDVR PAR return • FUE

    FUE  shift, and go to state 129


State 97

   57 err: ITR EOL ATP printSentence • FIN

    FIN  shift, and go to state 130


State 98

    4 program: program • sentence
    5        | program • decfun
   56 err: ITR program ATP program • FIN

    IDVR   shift, and go to state 1
    INT    shift, and go to state 2
    FLO    shift, and go to state 3
    VAR    shift, and go to state 4
    CHI    shift, and go to state 5
    FIN    shift, and go to state 131
    HAS    shift, and go to state 6
    FUN    shift, and go to state 7
    ITR    shift, and go to state 8
    PRINT  shift, and go to state 9
    POR    shift, and go to state 10

    sentence       go to state 37
    decvar         go to state 13
    initvar        go to state 14
    asigvar        go to state 15
    value          go to state 16
    operation      go to state 17
    callfuncion    go to state 18
    chi            go to state 19
    hasta          go to state 20
    decfun         go to state 38
    err            go to state 22
    for            go to state 23
    printSentence  go to state 24


State 99

   61 printSentence: PRINT PIZ STR PDE • EOL

    EOL  shift, and go to state 132


State 100

   62 printSentence: PRINT PIZ VSTR PDE • EOL

    EOL  shift, and go to state 133


State 101

   63 printSentence: PRINT PIZ value PDE • EOL

    EOL  shift, and go to state 134


State 102

   58 for: POR PIZ IDVR IGU • INT EOL value MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ IDVR IGU • INT EOL value MEIGU value PDE IDVR IGU operation EOL

    INT  shift, and go to state 135


State 103

   19 initvar: VAR IDVR • IGU INT EOL
   20        | VAR IDVR • IGU FLO EOL
   21        | VAR IDVR • IGU operation EOL
   22        | VAR IDVR • IGU value EOL

    IGU  shift, and go to state 51


State 104

   18 initvar: VAR VSTR • IGU STR EOL

    IGU  shift, and go to state 53


State 105

   60 for: POR PIZ initvar condition • PDE asigvar

    PDE  shift, and go to state 136


State 106

   34 callfuncion: IDVR PIZ INT INT PDE • EOL

    EOL  shift, and go to state 137


State 107

   19 initvar: VAR IDVR IGU INT EOL •

    $default  reduce using rule 19 (initvar)


State 108

   20 initvar: VAR IDVR IGU FLO EOL •

    $default  reduce using rule 20 (initvar)


State 109

   22 initvar: VAR IDVR IGU value EOL •

    $default  reduce using rule 22 (initvar)


State 110

   21 initvar: VAR IDVR IGU operation EOL •

    $default  reduce using rule 21 (initvar)


State 111

   18 initvar: VAR VSTR IGU STR EOL •

    $default  reduce using rule 18 (initvar)


State 112

   42 condition: value MEN value •

    $default  reduce using rule 42 (condition)


State 113

   43 condition: value MEIGU value •

    $default  reduce using rule 43 (condition)


State 114

   44 condition: value MAY value •

    $default  reduce using rule 44 (condition)


State 115

   45 condition: value MAYGU value •

    $default  reduce using rule 45 (condition)


State 116

   46 condition: value EQU value •

    $default  reduce using rule 46 (condition)


State 117

   47 condition: value DIF value •

    $default  reduce using rule 47 (condition)


State 118

   28 value: IDVR •
   36 chi: CHI PIZ condition PDE IDVR • IGU value EOL FIN
   37    | CHI PIZ condition PDE IDVR • IGU operation EOL FIN
   38    | CHI PIZ condition PDE IDVR • IGU value NOO IDVR IGU value EOL FIN
   39    | CHI PIZ condition PDE IDVR • IGU operation NOO IDVR IGU operation EOL FIN

    IGU  shift, and go to state 138

    $default  reduce using rule 28 (value)


State 119

   35 chi: CHI PIZ condition PDE operation • EOL FIN

    EOL  shift, and go to state 139


State 120

   40 hasta: HAS PIZ value MEN value • PDE IDVR IGU operation EOL

    PDE  shift, and go to state 140


State 121

   41 hasta: HAS PIZ value MEIGU value • PDE IDVR IGU operation EOL

    PDE  shift, and go to state 141


State 122

   48 decfun: FUN IDVR PAR EOL FUE •

    $default  reduce using rule 48 (decfun)


State 123

   28 value: IDVR •
   54 return: RTN IDVR • EOL

    EOL  shift, and go to state 142

    $default  reduce using rule 28 (value)


State 124

   55 return: RTN operation • EOL

    EOL  shift, and go to state 143


State 125

   50 decfun: FUN IDVR PAR decvar return • FUE

    FUE  shift, and go to state 144


State 126

   51 decfun: FUN IDVR PAR initvar return • FUE

    FUE  shift, and go to state 145


State 127

   52 decfun: FUN IDVR PAR asigvar return • FUE

    FUE  shift, and go to state 146


State 128

   53 decfun: FUN IDVR PAR operation return • FUE

    FUE  shift, and go to state 147


State 129

   49 decfun: FUN IDVR PAR return FUE •

    $default  reduce using rule 49 (decfun)


State 130

   57 err: ITR EOL ATP printSentence FIN •

    $default  reduce using rule 57 (err)


State 131

   56 err: ITR program ATP program FIN •

    $default  reduce using rule 56 (err)


State 132

   61 printSentence: PRINT PIZ STR PDE EOL •

    $default  reduce using rule 61 (printSentence)


State 133

   62 printSentence: PRINT PIZ VSTR PDE EOL •

    $default  reduce using rule 62 (printSentence)


State 134

   63 printSentence: PRINT PIZ value PDE EOL •

    $default  reduce using rule 63 (printSentence)


State 135

   58 for: POR PIZ IDVR IGU INT • EOL value MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ IDVR IGU INT • EOL value MEIGU value PDE IDVR IGU operation EOL

    EOL  shift, and go to state 148


State 136

   60 for: POR PIZ initvar condition PDE • asigvar

    IDVR  shift, and go to state 149

    asigvar  go to state 150


State 137

   34 callfuncion: IDVR PIZ INT INT PDE EOL •

    $default  reduce using rule 34 (callfuncion)


State 138

   36 chi: CHI PIZ condition PDE IDVR IGU • value EOL FIN
   37    | CHI PIZ condition PDE IDVR IGU • operation EOL FIN
   38    | CHI PIZ condition PDE IDVR IGU • value NOO IDVR IGU value EOL FIN
   39    | CHI PIZ condition PDE IDVR IGU • operation NOO IDVR IGU operation EOL FIN

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 151
    operation  go to state 152


State 139

   35 chi: CHI PIZ condition PDE operation EOL • FIN

    FIN  shift, and go to state 153


State 140

   40 hasta: HAS PIZ value MEN value PDE • IDVR IGU operation EOL

    IDVR  shift, and go to state 154


State 141

   41 hasta: HAS PIZ value MEIGU value PDE • IDVR IGU operation EOL

    IDVR  shift, and go to state 155


State 142

   54 return: RTN IDVR EOL •

    $default  reduce using rule 54 (return)


State 143

   55 return: RTN operation EOL •

    $default  reduce using rule 55 (return)


State 144

   50 decfun: FUN IDVR PAR decvar return FUE •

    $default  reduce using rule 50 (decfun)


State 145

   51 decfun: FUN IDVR PAR initvar return FUE •

    $default  reduce using rule 51 (decfun)


State 146

   52 decfun: FUN IDVR PAR asigvar return FUE •

    $default  reduce using rule 52 (decfun)


State 147

   53 decfun: FUN IDVR PAR operation return FUE •

    $default  reduce using rule 53 (decfun)


State 148

   58 for: POR PIZ IDVR IGU INT EOL • value MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ IDVR IGU INT EOL • value MEIGU value PDE IDVR IGU operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 156


State 149

   23 asigvar: IDVR • IGU value EOL
   24        | IDVR • IGU operation EOL
   25        | IDVR • IGU callfuncion

    IGU  shift, and go to state 25


State 150

   60 for: POR PIZ initvar condition PDE asigvar •

    $default  reduce using rule 60 (for)


State 151

   29 operation: value • MAS value
   30          | value • RES value
   31          | value • MUL value
   32          | value • DIV value
   36 chi: CHI PIZ condition PDE IDVR IGU value • EOL FIN
   38    | CHI PIZ condition PDE IDVR IGU value • NOO IDVR IGU value EOL FIN

    EOL  shift, and go to state 157
    MAS  shift, and go to state 39
    MUL  shift, and go to state 40
    RES  shift, and go to state 41
    DIV  shift, and go to state 42
    NOO  shift, and go to state 158


State 152

   37 chi: CHI PIZ condition PDE IDVR IGU operation • EOL FIN
   39    | CHI PIZ condition PDE IDVR IGU operation • NOO IDVR IGU operation EOL FIN

    EOL  shift, and go to state 159
    NOO  shift, and go to state 160


State 153

   35 chi: CHI PIZ condition PDE operation EOL FIN •

    $default  reduce using rule 35 (chi)


State 154

   40 hasta: HAS PIZ value MEN value PDE IDVR • IGU operation EOL

    IGU  shift, and go to state 161


State 155

   41 hasta: HAS PIZ value MEIGU value PDE IDVR • IGU operation EOL

    IGU  shift, and go to state 162


State 156

   58 for: POR PIZ IDVR IGU INT EOL value • MEN value PDE IDVR IGU operation EOL
   59    | POR PIZ IDVR IGU INT EOL value • MEIGU value PDE IDVR IGU operation EOL

    MEN    shift, and go to state 163
    MEIGU  shift, and go to state 164


State 157

   36 chi: CHI PIZ condition PDE IDVR IGU value EOL • FIN

    FIN  shift, and go to state 165


State 158

   38 chi: CHI PIZ condition PDE IDVR IGU value NOO • IDVR IGU value EOL FIN

    IDVR  shift, and go to state 166


State 159

   37 chi: CHI PIZ condition PDE IDVR IGU operation EOL • FIN

    FIN  shift, and go to state 167


State 160

   39 chi: CHI PIZ condition PDE IDVR IGU operation NOO • IDVR IGU operation EOL FIN

    IDVR  shift, and go to state 168


State 161

   40 hasta: HAS PIZ value MEN value PDE IDVR IGU • operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 169


State 162

   41 hasta: HAS PIZ value MEIGU value PDE IDVR IGU • operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 170


State 163

   58 for: POR PIZ IDVR IGU INT EOL value MEN • value PDE IDVR IGU operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 171


State 164

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU • value PDE IDVR IGU operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 172


State 165

   36 chi: CHI PIZ condition PDE IDVR IGU value EOL FIN •

    $default  reduce using rule 36 (chi)


State 166

   38 chi: CHI PIZ condition PDE IDVR IGU value NOO IDVR • IGU value EOL FIN

    IGU  shift, and go to state 173


State 167

   37 chi: CHI PIZ condition PDE IDVR IGU operation EOL FIN •

    $default  reduce using rule 37 (chi)


State 168

   39 chi: CHI PIZ condition PDE IDVR IGU operation NOO IDVR • IGU operation EOL FIN

    IGU  shift, and go to state 174


State 169

   40 hasta: HAS PIZ value MEN value PDE IDVR IGU operation • EOL

    EOL  shift, and go to state 175


State 170

   41 hasta: HAS PIZ value MEIGU value PDE IDVR IGU operation • EOL

    EOL  shift, and go to state 176


State 171

   58 for: POR PIZ IDVR IGU INT EOL value MEN value • PDE IDVR IGU operation EOL

    PDE  shift, and go to state 177


State 172

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU value • PDE IDVR IGU operation EOL

    PDE  shift, and go to state 178


State 173

   38 chi: CHI PIZ condition PDE IDVR IGU value NOO IDVR IGU • value EOL FIN

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value  go to state 179


State 174

   39 chi: CHI PIZ condition PDE IDVR IGU operation NOO IDVR IGU • operation EOL FIN

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 180


State 175

   40 hasta: HAS PIZ value MEN value PDE IDVR IGU operation EOL •

    $default  reduce using rule 40 (hasta)


State 176

   41 hasta: HAS PIZ value MEIGU value PDE IDVR IGU operation EOL •

    $default  reduce using rule 41 (hasta)


State 177

   58 for: POR PIZ IDVR IGU INT EOL value MEN value PDE • IDVR IGU operation EOL

    IDVR  shift, and go to state 181


State 178

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU value PDE • IDVR IGU operation EOL

    IDVR  shift, and go to state 182


State 179

   38 chi: CHI PIZ condition PDE IDVR IGU value NOO IDVR IGU value • EOL FIN

    EOL  shift, and go to state 183


State 180

   39 chi: CHI PIZ condition PDE IDVR IGU operation NOO IDVR IGU operation • EOL FIN

    EOL  shift, and go to state 184


State 181

   58 for: POR PIZ IDVR IGU INT EOL value MEN value PDE IDVR • IGU operation EOL

    IGU  shift, and go to state 185


State 182

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU value PDE IDVR • IGU operation EOL

    IGU  shift, and go to state 186


State 183

   38 chi: CHI PIZ condition PDE IDVR IGU value NOO IDVR IGU value EOL • FIN

    FIN  shift, and go to state 187


State 184

   39 chi: CHI PIZ condition PDE IDVR IGU operation NOO IDVR IGU operation EOL • FIN

    FIN  shift, and go to state 188


State 185

   58 for: POR PIZ IDVR IGU INT EOL value MEN value PDE IDVR IGU • operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 189


State 186

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU value PDE IDVR IGU • operation EOL

    IDVR  shift, and go to state 54
    INT   shift, and go to state 2
    FLO   shift, and go to state 3

    value      go to state 16
    operation  go to state 190


State 187

   38 chi: CHI PIZ condition PDE IDVR IGU value NOO IDVR IGU value EOL FIN •

    $default  reduce using rule 38 (chi)


State 188

   39 chi: CHI PIZ condition PDE IDVR IGU operation NOO IDVR IGU operation EOL FIN •

    $default  reduce using rule 39 (chi)


State 189

   58 for: POR PIZ IDVR IGU INT EOL value MEN value PDE IDVR IGU operation • EOL

    EOL  shift, and go to state 191


State 190

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU value PDE IDVR IGU operation • EOL

    EOL  shift, and go to state 192


State 191

   58 for: POR PIZ IDVR IGU INT EOL value MEN value PDE IDVR IGU operation EOL •

    $default  reduce using rule 58 (for)


State 192

   59 for: POR PIZ IDVR IGU INT EOL value MEIGU value PDE IDVR IGU operation EOL •

    $default  reduce using rule 59 (for)
